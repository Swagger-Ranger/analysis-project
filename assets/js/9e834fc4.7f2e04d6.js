"use strict";(self.webpackChunkanalytic_project=self.webpackChunkanalytic_project||[]).push([[7445],{7592:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>t,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var o=s(4848),r=s(8453);const i={title:"\u903b\u8f91\u8fd0\u7b97\u5de5\u5177",sidebar_position:1,toc_min_heading_level:2,toc_max_heading_level:5},t=void 0,a={id:"coreMiddleware/logicTool/\u903b\u8f91\u5de5\u5177",title:"\u903b\u8f91\u8fd0\u7b97\u5de5\u5177",description:"\u5f53\u6211\u4eec\u9700\u8981\u5904\u7406\u52a8\u6001\u7684boolean\u8fd0\u7b97\u65f6\uff0c\u7279\u522b\u662f\u4ee3\u7801\u4e2d\u6d89\u53ca\u590d\u6742\u7684\u4e1a\u52a1\u89c4\u5219\u5224\u65ad\uff0c\u5176\u4e2d\u8fd0\u7b97\u7b26\u90fd\u662f\u52a8\u6001\u586b\u5145\u7684\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528jbool_expressions\u5f00\u6e90\u5de5\u5177\u3002",source:"@site/docs/coreMiddleware/logicTool/\u903b\u8f91\u5de5\u5177.mdx",sourceDirName:"coreMiddleware/logicTool",slug:"/coreMiddleware/logicTool/\u903b\u8f91\u5de5\u5177",permalink:"/analysis-project/docs/coreMiddleware/logicTool/\u903b\u8f91\u5de5\u5177",draft:!1,unlisted:!1,editUrl:"https://github.com/Swagger-Ranger/analysis-project/docs/coreMiddleware/logicTool/\u903b\u8f91\u5de5\u5177.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"\u903b\u8f91\u8fd0\u7b97\u5de5\u5177",sidebar_position:1,toc_min_heading_level:2,toc_max_heading_level:5},sidebar:"middlewareSidebar",previous:{title:"Kafka\u624b\u518c3-Streams",permalink:"/analysis-project/docs/coreMiddleware/kakfa/Kafka\u624b\u518c3-Streams"},next:{title:"OGNL",permalink:"/analysis-project/docs/coreMiddleware/logicTool/OGNL"}},l={},p=[{value:"\u4ee3\u7801\u5b9e\u64cd",id:"\u4ee3\u7801\u5b9e\u64cd",level:3},{value:"jbool_expressions\u7684\u5b9e\u73b0",id:"jbool_expressions\u7684\u5b9e\u73b0",level:3}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["\u5f53\u6211\u4eec\u9700\u8981\u5904\u7406\u52a8\u6001\u7684boolean\u8fd0\u7b97\u65f6\uff0c\u7279\u522b\u662f\u4ee3\u7801\u4e2d\u6d89\u53ca\u590d\u6742\u7684\u4e1a\u52a1\u89c4\u5219\u5224\u65ad\uff0c\u5176\u4e2d\u8fd0\u7b97\u7b26\u90fd\u662f\u52a8\u6001\u586b\u5145\u7684\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528",(0,o.jsx)(e.code,{children:"jbool_expressions"}),"\u5f00\u6e90\u5de5\u5177\u3002"]}),"\n",(0,o.jsx)(e.p,{children:"\u5176\u5b98\u65b9\u7684\u89e3\u91ca\uff1a"}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"jbool_expressions is a simple open-source library for creating and manipulating boolean expressions in java."}),"\n",(0,o.jsxs)(e.p,{children:["A basic propositional expression is built out of the types ",(0,o.jsx)(e.code,{children:"And"}),", ",(0,o.jsx)(e.code,{children:"Or"}),", ",(0,o.jsx)(e.code,{children:"Not"}),", ",(0,o.jsx)(e.code,{children:"Variable"})," and ",(0,o.jsx)(e.code,{children:"Literal"}),". All of these extend the base type Expression."]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.a,{href:"https://github.com/bpodgursky/jbool_expressions",children:"GitHub"})}),"\n",(0,o.jsx)(e.h3,{id:"\u4ee3\u7801\u5b9e\u64cd",children:"\u4ee3\u7801\u5b9e\u64cd"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.bpodgursky</groupId>\n    <artifactId>jbool_expressions</artifactId>\n    <version>1.23</version>\n</dependency>\n\n\x3c!-- \u5f15\u5165JUnit 5\u65b9\u4fbf\u5199\u4ee3\u7801\u6d4b\u8bd5 --\x3e\n\x3c!-- JUnit 5 API --\x3e\n<dependency>\n  <groupId>org.junit.jupiter</groupId>\n  <artifactId>junit-jupiter-api</artifactId>\n  <version>5.7.1</version>\n  <scope>test</scope>\n</dependency>\n\x3c!-- JUnit 5 Engine --\x3e\n<dependency>\n  <groupId>org.junit.jupiter</groupId>\n  <artifactId>junit-jupiter-engine</artifactId>\n  <version>5.7.1</version>\n  <scope>test</scope>\n</dependency>\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import com.bpodgursky.jbool_expressions.*;\nimport com.bpodgursky.jbool_expressions.parsers.ExprParser;\nimport com.bpodgursky.jbool_expressions.rules.RuleSet;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n/**\n * @author liufei\n **/\npublic class JboolExpressionTest {\n\n    @Test\n    @DisplayName("\u6784\u5efa\u8868\u8fbe\u5f0f")\n    public void test1() {\n        Expression<String> expr = And.of(\n                Variable.of("A"),\n                Variable.of("B"),\n                Or.of(Variable.of("C"), Not.of(Variable.of("C"))));\n        System.out.println(expr);\n\n        // \u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u5b57\u7b26\u4e32\u6765parse\n        Expression<String> exprStr = ExprParser.parse("(A & B & (C | !C)) ");\n        System.out.println(exprStr);\n\n        assertEquals(expr, exprStr);\n    }\n\n    @Test\n    @DisplayName("\u7b80\u5316\u8868\u8fbe\u5f0f")\n    public void test2() {\n        Expression<String> expr = ExprParser.parse("(A & B & (C | !C)) ");\n        // (A & B & (C | !C)) --\x3e (A & B)\n        Expression<String> simplified = RuleSet.simplify(expr);\n        System.out.println(simplified);\n\n        // \u7b80\u5316\u8868\u8fbe\u5f0f\u662f\u65b0\u8f93\u51fa\u503c\uff0c\u4e0d\u4f1a\u4fee\u6539\u539f\u6709\u7684\u503c\u7684\n        System.out.println(expr);\n    }\n\n    @Test\n    @DisplayName("\u53d8\u91cf\u8d4b\u503c")\n    public void test3() {\n        Expression<String> simplified = ExprParser.parse("(A & B)");\n        Expression<String> halfAssigned = RuleSet.assign(simplified, Collections.singletonMap("A", true));\n        System.out.println(halfAssigned);\n\n        Expression<String> resolved = RuleSet.assign(halfAssigned, Collections.singletonMap("B", true));\n        System.out.println(resolved);\n    }\n\n    @Test\n    @DisplayName("\u8868\u8fbe\u5f0fDNF/CNF")\n    public void test4() {\n        /**\n         * \u901a\u8fc7\u4f7f\u7528\u5e03\u5c14\u4ee3\u6570\u89c4\u5219\uff0c\u4f8b\u5982\u5206\u914d\u5f8b\u3001\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\u7b49\u4f7f\u5f97\u903b\u8f91\u8868\u8fbe\u5f0f\u53ef\u4ee5\u7edf\u4e00\u5904\u7406\u548c\u7b80\u5316\uff0c\u6709\u52a9\u4e8e\u8fdb\u884c\u903b\u8f91\u8868\u8fbe\u5f0f\u7684\u7b80\u5316\u548c\u4f18\u5316\uff0c\u7279\u522b\u662f\u5728\u903b\u8f91\u7535\u8def\u8bbe\u8ba1\u4e2d\u3002\n         * \u6570\u5b66\u8fd0\u7b97\uff1a^\u4e0e\uff0c\u2228\u6216\uff0c\xac\u975e\uff0c\u2192\u63a8\u5230\uff1aa->b\u8868\u793aa\u4e3a\u771fb\u4e5f\u4e3a\u771f\uff0c\u2194\u5bf9\u7b49A \u2194 B\uff1aA\u548cB\u90fd\u4e3a\u771f\u6216\u90fd\u4e3a\u5047\u3002\n         * toDNF \u548c toCNF \u662f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u5316\u7684\uff0c\u6bd4\u5982\uff1atoDNF\u540e\uff0c\u518dtoCNF\u5c31\u8fd8\u539f\u56de\u53bb\u4e86\n         *\n         * DNF(Disjunctive Normal (Sum-of-Products) Form)\u4e00\u79cd\u89c4\u8303\u5f62\u5f0f\uff0c\u7528\u4e8e\u8868\u793a\u5e03\u5c14\u903b\u8f91\u8868\u8fbe\u5f0f\uff0c\n         * DNF\u5c31\u662f\u5c06\u5185\u90e8\u6216\u8fd0\u7b97\u5168\u90e8\u8f6c\u5316\u4e3a\u4e00\u7cfb\u5217\u4e0e\u8fd0\u7b97\u7684\u96c6\u5408\n         * \u6bd4\u5982\uff1a((A | B) & (C | D)) --\x3e  ((A & C) | (A & D) | (B & C) | (B & D))\n         *\n         * CNF\uff08Conjunctive Normal\uff08product-of-sums\uff09 Form\uff09\uff08\u5408\u53d6\u8303\u5f0f\uff09\uff1a\u4e3b\u8981\u7528\u4e8e\u6ee1\u8db3\u6027\u95ee\u9898\u548c\u5e03\u5c14\u903b\u8f91\u516c\u5f0f\u7684\u8bc1\u660e\n         * CNF\u5c31\u662f\u5c06\u5185\u90e8\u4e0e\u8fd0\u7b97\u5168\u90e8\u8f6c\u5316\u4e00\u7cfb\u5217\u6216\u8fd0\u7b97\u7684\u96c6\u5408\n         * \u6bd4\u5982\uff1a((A & B) | (C & D)) --\x3e  ((A | C) & (A | D) & (B | C) & (B | D))\n         */\n\n        // toDNF\n        Expression<String> nonStandard = ExprParser.parse("((A | B) & (C | D))");\n        System.out.println(nonStandard);\n\n        Expression<String> sopForm = RuleSet.toDNF(nonStandard);\n        System.out.println(sopForm);\n        assertEquals(sopForm.toString(), "((A & C) | (A & D) | (B & C) | (B & D))");\n\n\n        // toCNF\n        Expression<String> nonStandard1 = ExprParser.parse("((A & B) | (C & D))");\n        System.out.println(nonStandard1);\n\n        Expression<String> posForm = RuleSet.toCNF(nonStandard1);\n        System.out.println(posForm);\n        assertEquals(posForm.toString(), "((A | C) & (A | D) & (B | C) & (B | D))");\n\n    }\n\n\n    @Test\n    @DisplayName("\u8ba1\u7b97\u8868\u8fbe\u5f0f")\n    public void test5() {\n        // \u89e3\u6790\u5e03\u5c14\u8868\u8fbe\u5f0f\n        Expression<String> expr = ExprParser.parse("(A & B) | (C & D)");\n        // \u5b9a\u4e49\u53d8\u91cf\u503c\n        Map<String, Boolean> values = new HashMap<>();\n        values.put("A", true);\n        values.put("B", false);\n        values.put("C", true);\n\n        // \u8ba1\u7b97\u5e03\u5c14\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\n        Expression<String> assign = RuleSet.assign(expr, values);\n        System.out.println("Evaluation Result: " + assign);\n        assertEquals(assign.toString(), "D");\n\n        values.put("D", true);\n        Expression<String> assign1 = RuleSet.assign(expr, values);\n        System.out.println("Evaluation Result: " + assign1);\n        assertEquals(assign1.toString(), "true");\n    }\n\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"jbool_expressions\u7684\u5b9e\u73b0",children:"jbool_expressions\u7684\u5b9e\u73b0"}),"\n",(0,o.jsxs)(e.p,{children:["jbool_expressions\u662f\u57fa\u4e8e",(0,o.jsx)(e.code,{children:"antlr3"}),"\u6784\u5efa\uff0c\u6765\u751f\u6210\u7684\u52a8\u6001\u8bed\u6cd5\u6811\uff0c\u5b83\u6309\u5b9a\u4e49\u7684\u89c4\u5219\uff0c\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8bcd\u6cd5\u5206\u6790\uff0c\u89e3\u6790\u6210\u4e00\u4e2a\u4e2atoken\uff0c\u7136\u540e\u518d\u8bed\u6cd5\u5206\u6790\u751f\u6210\u8868\u8fbe\u5f0f\u7684AST (\u62bd\u8c61\u8bed\u6cd5\u6811)\u3002\u7136\u540e\u518d\u52a8\u6001\u8d4b\u503c\u5e76\u8fdb\u884c\u89c4\u5219\u8fd0\u7b97\u800c\u5f97\u51fa\u7ed3\u679c\u3002"]}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"ANTLR\uff08Another Tool for Language Recognition\uff09\u662f\u4e00\u79cd\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u751f\u6210\u8bcd\u6cd5\u5206\u6790\u5668\u548c\u8bed\u6cd5\u5206\u6790\u5668\u3002\u5b83\u53ef\u4ee5\u7528\u6765\u5904\u7406\u8bed\u8a00\u7684\u89e3\u6790\u4efb\u52a1\uff0c\u4ece\u6e90\u4ee3\u7801\u6216\u6587\u672c\u4e2d\u751f\u6210\u62bd\u8c61\u8bed\u6cd5\u6811\uff08AST\uff09\u3002"}),"\n"]}),"\n",(0,o.jsx)("div",{style:{textAlign:"center",width:"100%"},children:(0,o.jsx)("img",{src:"/analysis-project/img/logicTool/jbool.png",alt:"image",style:{maxWidth:"60%",height:"auto",display:"block",margin:"0 auto"}})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"com.bpodgursky.jbool_expressions.eval"})," \u662fjbool_expressions\u7528\u4e8e\u89e3\u6790\u3001\u6784\u5efa\u548c\u8bc4\u4f30\u5e03\u5c14\u8868\u8fbe\u5f0f\uff0c\u5305\u542b\u4e86\u4e00\u4e9b\u7528\u4e8e\u5b9a\u4e49\u548c\u5904\u7406\u5e03\u5c14\u8868\u8fbe\u5f0f\u89c4\u5219\u7684\u7c7b\u3002"]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"com.bpodgursky.jbool_expressions.parsers"}),"\u662fjbool_expressions\u7684antlr\u7f16\u8bd1\u751f\u6210\u7684token\u548c\u8bed\u6cd5\u6811\u3002"]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"com.bpodgursky.jbool_expressions.rules"})," \u662fjbool_expressions\u7528\u4e8e\u5904\u7406\u89c4\u5219\u96c6\u7684\u4ee3\u7801\u5305"]})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>t,x:()=>a});var o=s(6540);const r={},i=o.createContext(r);function t(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);
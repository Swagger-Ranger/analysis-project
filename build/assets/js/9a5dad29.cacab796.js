"use strict";(self.webpackChunkanalytic_project=self.webpackChunkanalytic_project||[]).push([[6514],{5630:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=r(4848),t=r(8453);const i={title:"data-structure-\u8df3\u8868",sidebar_position:14,toc_min_heading_level:2,toc_max_heading_level:5},d=void 0,l={id:"JavaDocs/DSA/data-structure-\u8df3\u8868",title:"data-structure-\u8df3\u8868",description:"\u8df3\u8868\u662f\u4e00\u79cd\u57fa\u4e8e\u591a\u7ea7\u7d22\u5f15\u7684\u6709\u5e8f\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7684\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u5728\u6709\u5e8f\u94fe\u8868\u7684\u57fa\u7840\u4e0a\u5f15\u5165\u591a\u7ea7\u7d22\u5f15\uff0c\u4f7f\u5f97\u5728\u94fe\u8868\u4e0a\u5b9e\u73b0\u4e8c\u5206\u67e5\u627e\u6210\u4e3a\u53ef\u80fd\uff0c\u4ece\u800c\u63d0\u9ad8\u67e5\u627e\u6548\u7387\u3002\u8df3\u8868\u901a\u8fc7\u968f\u673a\u5316\u6280\u672f\uff0c\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fbe\u5230 O(log\u2061n)O(logn)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u975e\u5e38\u9002\u5408\u7528\u4e8e\u5b9e\u73b0\u6709\u5e8f\u96c6\u5408\u548c\u6620\u5c04\u3002",source:"@site/docs/JavaDocs/DSA/data-structure-\u8df3\u8868.mdx",sourceDirName:"JavaDocs/DSA",slug:"/JavaDocs/DSA/data-structure-\u8df3\u8868",permalink:"/analysis-project/docs/JavaDocs/DSA/data-structure-\u8df3\u8868",draft:!1,unlisted:!1,editUrl:"https://github.com/Swagger-Ranger/analysis-project/docs/JavaDocs/DSA/data-structure-\u8df3\u8868.mdx",tags:[],version:"current",sidebarPosition:14,frontMatter:{title:"data-structure-\u8df3\u8868",sidebar_position:14,toc_min_heading_level:2,toc_max_heading_level:5},sidebar:"jdkSidebar",previous:{title:"data-structure-\u591a\u7ef4\u6570\u636e\u7d22\u5f15",permalink:"/analysis-project/docs/JavaDocs/DSA/data-structure-\u591a\u7ef4\u6570\u636e\u7d22\u5f15"},next:{title:"SA",permalink:"/analysis-project/docs/category/sa"}},o={},s=[{value:"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u8df3\u8868\u800c\u4e0d\u662f\u5e73\u8861\u6811",id:"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u8df3\u8868\u800c\u4e0d\u662f\u5e73\u8861\u6811",level:3},{value:"1. \u987a\u5e8f\u8bbf\u95ee\u7684\u6548\u7387",id:"1-\u987a\u5e8f\u8bbf\u95ee\u7684\u6548\u7387",level:4},{value:"2. \u7f13\u5b58\u53cb\u597d\u6027",id:"2-\u7f13\u5b58\u53cb\u597d\u6027",level:4},{value:"3. \u9884\u53d6\uff08Prefetching\uff09",id:"3-\u9884\u53d6prefetching",level:4},{value:"4. \u63d2\u5165\u548c\u5220\u9664\u7684\u5c40\u90e8\u6027",id:"4-\u63d2\u5165\u548c\u5220\u9664\u7684\u5c40\u90e8\u6027",level:4},{value:"\u4e00\u4e2a\u4ee3\u7801\u5b9e\u73b0",id:"\u4e00\u4e2a\u4ee3\u7801\u5b9e\u73b0",level:3},{value:"\u5e76\u53d1\u5b89\u5168\u7684\u8df3\u8868",id:"\u5e76\u53d1\u5b89\u5168\u7684\u8df3\u8868",level:3}];function c(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"\u8df3\u8868\u662f\u4e00\u79cd\u57fa\u4e8e\u591a\u7ea7\u7d22\u5f15\u7684\u6709\u5e8f\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7684\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u5728\u6709\u5e8f\u94fe\u8868\u7684\u57fa\u7840\u4e0a\u5f15\u5165\u591a\u7ea7\u7d22\u5f15\uff0c\u4f7f\u5f97\u5728\u94fe\u8868\u4e0a\u5b9e\u73b0\u4e8c\u5206\u67e5\u627e\u6210\u4e3a\u53ef\u80fd\uff0c\u4ece\u800c\u63d0\u9ad8\u67e5\u627e\u6548\u7387\u3002\u8df3\u8868\u901a\u8fc7\u968f\u673a\u5316\u6280\u672f\uff0c\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fbe\u5230 O(log\u2061n)O(logn)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u975e\u5e38\u9002\u5408\u7528\u4e8e\u5b9e\u73b0\u6709\u5e8f\u96c6\u5408\u548c\u6620\u5c04\u3002"}),"\n",(0,a.jsx)(n.h3,{id:"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u8df3\u8868\u800c\u4e0d\u662f\u5e73\u8861\u6811",children:"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u8df3\u8868\u800c\u4e0d\u662f\u5e73\u8861\u6811"}),"\n",(0,a.jsx)(n.h4,{id:"1-\u987a\u5e8f\u8bbf\u95ee\u7684\u6548\u7387",children:"1. \u987a\u5e8f\u8bbf\u95ee\u7684\u6548\u7387"}),"\n",(0,a.jsx)(n.p,{children:"\u8df3\u8868\u4e2d\u7684\u8282\u70b9\u5728\u5e95\u5c42\u662f\u4ee5\u94fe\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u4e14\u94fe\u8868\u4e2d\u7684\u6570\u636e\u662f\u6709\u5e8f\u7684\u3002\u5bf9\u4e8e\u8fde\u7eed\u6570\u636e\u7684\u8bfb\u53d6\uff0c\u987a\u5e8f\u904d\u5386\u94fe\u8868\u6bd4\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u8981\u66f4\u4e3a\u76f4\u63a5\u548c\u9ad8\u6548\u3002\u5728\u8df3\u8868\u4e2d\u8bfb\u53d6\u8fde\u7eed\u6570\u636e\u65f6\uff0c\u53ea\u9700\u6cbf\u7740\u94fe\u8868\u4ece\u4e00\u4e2a\u8282\u70b9\u904d\u5386\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u79cd\u64cd\u4f5c\u7684\u5c40\u90e8\u6027\u975e\u5e38\u597d\uff0c\u7f13\u5b58\u547d\u4e2d\u7387\u8f83\u9ad8\u3002\n\u5728\u4e8c\u53c9\u6811\uff08\u7279\u522b\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u5982AVL\u6811\u6216\u7ea2\u9ed1\u6811\uff09\u4e2d\uff0c\u5373\u4f7f\u6570\u636e\u662f\u6709\u5e8f\u7684\uff0c\u4e2d\u5e8f\u904d\u5386\u4ecd\u9700\u8981\u5728\u5de6\u53f3\u5b50\u6811\u4e4b\u95f4\u8fdb\u884c\u5207\u6362\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u66f4\u591a\u7684\u5185\u5b58\u8df3\u8f6c\u548c\u8f83\u4f4e\u7684\u7f13\u5b58\u547d\u4e2d\u7387\u3002\u56e0\u6b64\uff0c\u8fde\u7eed\u8bfb\u53d6\u65f6\u8df3\u8868\u7684\u6027\u80fd\u901a\u5e38\u4f18\u4e8e\u4e8c\u53c9\u6811\u3002"}),"\n",(0,a.jsx)(n.h4,{id:"2-\u7f13\u5b58\u53cb\u597d\u6027",children:"2. \u7f13\u5b58\u53cb\u597d\u6027"}),"\n",(0,a.jsx)(n.p,{children:"\u8df3\u8868\u7684\u5206\u5c42\u7ed3\u6784\u5c06\u9ad8\u5c42\u7684\u7d22\u5f15\u8282\u70b9\u548c\u4f4e\u5c42\u7684\u6570\u636e\u8282\u70b9\u5206\u5f00\u3002\u9ad8\u5c42\u7d22\u5f15\u8282\u70b9\u76f8\u5bf9\u8f83\u5c11\uff0c\u5b58\u50a8\u5728\u8fde\u7eed\u5185\u5b58\u533a\u57df\u4e2d\uff0c\u8bbf\u95ee\u65f6\u7f13\u5b58\u6548\u679c\u8f83\u597d\u3002\u5e95\u5c42\u7684\u5b8c\u6574\u94fe\u8868\u867d\u7136\u4f1a\u6709\u65b0\u7684\u8282\u70b9\u63d2\u5165\uff0c\u4f46\u7531\u4e8e\u94fe\u8868\u8282\u70b9\u95f4\u901a\u8fc7\u6307\u9488\u8fde\u63a5\uff0c\u63d2\u5165\u64cd\u4f5c\u53ea\u6d89\u53ca\u5c11\u91cf\u6307\u9488\u8c03\u6574\uff0c\u4e0d\u4f1a\u7834\u574f\u94fe\u8868\u7684\u6574\u4f53\u987a\u5e8f\u6027\u548c\u5b58\u50a8\u5c40\u90e8\u6027\u3002\n\u8df3\u8868\u7684\u5e95\u5c42\u94fe\u8868\u7ed3\u6784\u5728\u5185\u5b58\u4e2d\u5f80\u5f80\u662f\u8fde\u7eed\u7684\uff0c\u8fd9\u79cd\u8fde\u7eed\u6027\u4f7f\u5f97\u8df3\u8868\u5728\u8bbf\u95ee\u65f6\u80fd\u591f\u66f4\u597d\u5730\u5229\u7528 CPU \u7f13\u5b58\u3002\u5728\u8bfb\u53d6\u8fde\u7eed\u6570\u636e\u65f6\uff0c\u8df3\u8868\u4e2d\u7684\u8282\u70b9\u5f80\u5f80\u9884\u5148\u52a0\u8f7d\u5230\u7f13\u5b58\u4e2d\uff0c\u4ece\u800c\u51cf\u5c11\u5185\u5b58\u8bbf\u95ee\u7684\u6b21\u6570\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u5728\u5185\u5b58\u4e2d\u7684\u5e03\u5c40\u53ef\u80fd\u662f\u5206\u6563\u7684\uff0c\u7279\u522b\u662f\u5728\u52a8\u6001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u4e4b\u540e\u3002\u8bbf\u95ee\u4e8c\u53c9\u6811\u65f6\uff0c\u8282\u70b9\u7684\u5185\u5b58\u5730\u5740\u53ef\u80fd\u5206\u5e03\u5728\u8f83\u5927\u7684\u8303\u56f4\u5185\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u7f13\u5b58\u547d\u4e2d\u7387\u964d\u4f4e\uff0c\u5f71\u54cd\u8bfb\u53d6\u6027\u80fd\u3002"}),"\n",(0,a.jsx)(n.h4,{id:"3-\u9884\u53d6prefetching",children:"3. \u9884\u53d6\uff08Prefetching\uff09"}),"\n",(0,a.jsx)(n.p,{children:"\u73b0\u4ee3\u5904\u7406\u5668\u5177\u6709\u9884\u53d6\u529f\u80fd\uff0c\u4f1a\u9884\u6d4b\u7a0b\u5e8f\u5373\u5c06\u8bbf\u95ee\u7684\u5185\u5b58\u5730\u5740\u5e76\u63d0\u524d\u52a0\u8f7d\u6570\u636e\u3002\u8df3\u8868\u4e2d\u8fde\u7eed\u7684\u94fe\u8868\u7ed3\u6784\u66f4\u9002\u5408\u5904\u7406\u5668\u8fdb\u884c\u9884\u53d6\uff0c\u4f7f\u5f97\u987a\u5e8f\u8bbf\u95ee\u65f6\u7684\u6027\u80fd\u66f4\u9ad8\u3002\n\u4e8c\u53c9\u6811\u7531\u4e8e\u8282\u70b9\u4e0d\u8fde\u7eed\uff0c\u5904\u7406\u5668\u7684\u9884\u53d6\u6548\u679c\u4e0d\u5982\u8df3\u8868\u660e\u663e\uff0c\u5bfc\u81f4\u8fde\u7eed\u6570\u636e\u8bbf\u95ee\u7684\u6027\u80fd\u76f8\u5bf9\u8f83\u5dee\u3002"}),"\n",(0,a.jsx)(n.h4,{id:"4-\u63d2\u5165\u548c\u5220\u9664\u7684\u5c40\u90e8\u6027",children:"4. \u63d2\u5165\u548c\u5220\u9664\u7684\u5c40\u90e8\u6027"}),"\n",(0,a.jsx)(n.p,{children:"\u5728\u8df3\u8868\u4e2d\uff0c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u5bf9\u6570\u636e\u5e03\u5c40\u7684\u5f71\u54cd\u76f8\u5bf9\u8f83\u5c0f\uff0c\u94fe\u8868\u4e2d\u7684\u6570\u636e\u987a\u5e8f\u4e0d\u4f1a\u88ab\u6253\u4e71\uff0c\u5c3d\u7ba1\u6bcf\u6b21\u63d2\u5165\u90fd\u4f1a\u6539\u53d8\u94fe\u8868\u7ed3\u6784\uff0c\u4f46\u7531\u4e8e\u8df3\u8868\u7684\u968f\u673a\u5316\u63d2\u5165\u7b56\u7565\uff0c\u63d2\u5165\u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(logn)\uff0c\u4e14\u63d2\u5165\u6210\u672c\u5728\u6574\u4f53\u4e0a\u662f\u5206\u644a\u7684\uff0c\u4e0d\u4f1a\u5728\u5355\u6b21\u64cd\u4f5c\u4e2d\u51fa\u73b0\u5927\u89c4\u6a21\u7684\u6570\u636e\u79fb\u52a8\u3002\u3002\u800c\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u7279\u522b\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u4e3a\u4e86\u4fdd\u6301\u5e73\u8861\u6027\uff0c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u6811\u7684\u7ed3\u6784\u53d1\u751f\u8f83\u5927\u53d8\u5316\uff0c\u5f71\u54cd\u540e\u7eed\u7684\u8bfb\u53d6\u6027\u80fd\u3002"}),"\n",(0,a.jsx)(n.h3,{id:"\u4e00\u4e2a\u4ee3\u7801\u5b9e\u73b0",children:"\u4e00\u4e2a\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Java",children:'/**\n * @author liufei\n **/\npublic class SkipList {\n\n    private static final float SKIPLIST_P = 0.5f;\n    private static final int MAX_LEVEL = 16;\n\n    private int levelCount = 1;\n\n    private final Node head = new Node();  // \u5e26\u5934\u94fe\u8868\n\n    public Node find(int value) {\n        Node p = head;\n        /*\n         * \u8fd9\u91cc \u5916\u5c42\u4e00\u4e2afor\u7136\u540e\u91cc\u9762\u4e00\u4e2awhile\uff0c\u5176\u5b9e\u5c31\u662f\u5c06\u8df3\u8868\u538b\u6241\uff0cfor\u4ee3\u8868\u7684\u5c31\u662f\u9ad8\u5ea6\u5373\u884c\uff0cwhile\u5c31\u662f\u9ad8\u5ea6\u884c\u91cc\u9762\u7684\u90a3\u4e2a\u6570\u7ec4\u5373\u5217\u6570\u636e\n         * forwards \u662f\u5411\u4e0b\u7684\u6570\u7ec4\uff0c\u8fd9\u91cci\u5728\u5411\u53f3\u7684\u540c\u65f6\u4e5f\u5728\u5411\u4e0b\uff0c\u627e\u5230\u4f4e\u5c31\u662f\u503c\uff0c\u76f8\u7b49\u5219\u627e\u5230\uff0c\u4e0d\u76f8\u7b49\u5c31\u662f\u7a7a\n         * \u903b\u8f91\u5c31\u662f\uff1a\u65e0\u8111\u5411\u53f3\uff0c\u7136\u540e\u627e\u5230\u4e0d\u6ee1\u8db3\u7684\u5c31\u5411\u4e0b\uff0c\u5c31\u8fd9\u6837\u5411\u53f3\u518d\u5411\u4e0b\uff0c\u4e00\u76f4\u6267\u884c\u4e0b\u53bb\uff1b\n         *          \u56e0\u4e3a\u6570\u636e\u662f\u62cd\u597d\u5e8f\u7684\uff0c\u5411\u4e0b\u5c31\u662f\u5728\u4e00\u5c42\u5c42\u904d\u5386\u7d22\u5f15\uff0c\u76f4\u5230\u627e\u5230\u6570\u636e\u8282\u70b9\uff0c\u5e76\u4e14\u5411\u53f3\u4e4b\u540e\u4e0d\u53ef\u80fd\u5411\u5de6\uff1b\n         */\n        for (int i = levelCount - 1; i >= 0; --i) {\n            while (p.forwards[i] != null && p.forwards[i].data < value) {\n                p = p.forwards[i];\n            }\n        }\n\n        if (p.forwards[0] != null && p.forwards[0].data == value) {\n            return p.forwards[0];\n        } else {\n            return null;\n        }\n    }\n\n    public void insert(int value) {\n        int level = randomLevel();\n        Node newNode = new Node();\n        newNode.data = value;\n        newNode.maxLevel = level;\n        Node[] update = new Node[level];\n        // \u65b0\u5efa\u4e00\u4e2a\u9ad8\u5ea6\u662f level\u7684\u5411\u4e0b\u7684 forwards \uff0c\u521d\u59cb\u5316update\u6570\u7ec4\uff0c\u5e76\u4e14\u6bcf\u4e00\u5c42\u94fe\u8868\u7684\u5f00\u59cb\u90fd\u662fhead\u8282\u70b9\n        // \u8fd9\u4e2aupdate\u6570\u7ec4\u8bb0\u5f55\u7684\u662f\u6bcf\u4e00\u5c42\u8981\u66f4\u65b0\u7684\u8282\u70b9\u6570\u636e\uff0c\u5e76\u4e0d\u662f\u4e00\u4e2a\u5411\u4e0b\u7684\u7d22\u5f15\u6570\u7ec4\n        for (int i = 0; i < level; ++i) {\n            update[i] = head;\n        }\n\n        // record every level largest value which smaller than insert value in update[]\n        Node p = head;\n        for (int i = level - 1; i >= 0; --i) {\n            while (p.forwards[i] != null && p.forwards[i].data < value) {\n                p = p.forwards[i];\n            }\n            // \u8fd8\u662f\u7ee7\u7eedfind \u65b9\u6cd5\u7684\u903b\u8f91\uff0c\u53ea\u662f\u5c06\u6bcf\u4e00\u5c42\u5c0f\u4e8e\u63d2\u5165\u503c\u7684\u6700\u5927\u8282\u70b9\u90fd\u66f4\u65b0\u5230update\u6570\u7ec4\u4e2d\n            update[i] = p;// use update save node in search path\n        }\n\n        /*\n         * \u6bcf\u4e2anode\u7684forwards\u90fd\u662f\u5176\u81ea\u8eab\u548c\u5411\u53f3\u7684\u5f15\u7528\uff0c\n         * \u81ea\u8eab\u5bf9\u5e94\u7684\u4ee3\u7801\u5c31\u662f\uff1aupdate[i].forwards[i] = newNode;\n         * \u5411\u53f3\u7684\u5f15\u7528\u7684\u4ee3\u7801\u5c31\u662f\uff1anewNode.forwards[i] = update[i].forwards[i];\n         * update\u6570\u7ec4\u5c31\u662f\u8981\u66f4\u65b0\u65b0\u63d2\u5165\u8282\u70b9\u800c\u6539\u53d8\u7684\u5411\u53f3\u7684\u5f15\u7528\n         */\n        // in search path node next node become new node forwords(next)\n        for (int i = 0; i < level; ++i) {\n            // \u8fd9\u91cc\u5c31\u662f\u5728\u63d2\u5165\u65b0\u7684\u6570\u7ec4\u5217\uff0c\u5c06\u540e\u8282\u70b9\u66ff\u6362\u4e3anewNode\u7684\u540e\u8282\u70b9newNode.forwards[i] = update[i].forwards[i];\uff0c\u5c06\u524d\u8282\u70b9\u7684\u540e\u8282\u70b9\u7528newNode\u4ee3\u66ff\n            newNode.forwards[i] = update[i].forwards[i];\n            update[i].forwards[i] = newNode;\n        }\n\n        // update node hight\n        if (levelCount < level) levelCount = level;\n    }\n\n    public void delete(int value) {\n        Node[] update = new Node[levelCount];\n        Node p = head;\n        for (int i = levelCount - 1; i >= 0; --i) {\n            while (p.forwards[i] != null && p.forwards[i].data < value) {\n                p = p.forwards[i];\n            }\n            update[i] = p;\n        }\n\n        // \u5148\u5224\u65ad\u6570\u636e\u8282\u70b9\u5b58\u4e0d\u5b58\u5728\n        if (p.forwards[0] != null && p.forwards[0].data == value) {\n            for (int i = levelCount - 1; i >= 0; --i) {\n                // \u518d\u5224\u65ad\u5982\u679c\u5220\u9664\u7684\u8282\u70b9\u6b63\u597d\u6709\u5411\u4e0a\u7d22\u5f15\u4f4d\u7f6e\u7684\u6570\u7ec4\uff0c\u5219\u5c06\u7d22\u5f15\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u8282\u70b9\u4e5f\u5220\u6389\n                if (update[i].forwards[i] != null && update[i].forwards[i].data == value) {\n                    update[i].forwards[i] = update[i].forwards[i].forwards[i];\n                }\n            }\n        }\n\n        // \u5982\u679c\n        while (levelCount>1&&head.forwards[levelCount]==null){\n            levelCount--;\n        }\n\n    }\n\n    // \u7406\u8bba\u6765\u8bb2\uff0c\u4e00\u7ea7\u7d22\u5f15\u4e2d\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u5360\u539f\u59cb\u6570\u636e\u7684 50%\uff0c\u4e8c\u7ea7\u7d22\u5f15\u4e2d\u5143\u7d20\u4e2a\u6570\u5360 25%\uff0c\u4e09\u7ea7\u7d22\u5f1512.5% \uff0c\u4e00\u76f4\u5230\u6700\u9876\u5c42\u3002\n    // \u56e0\u4e3a\u8fd9\u91cc\u6bcf\u4e00\u5c42\u7684\u664b\u5347\u6982\u7387\u662f 50%\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65b0\u63d2\u5165\u7684\u8282\u70b9\uff0c\u90fd\u9700\u8981\u8c03\u7528 randomLevel \u751f\u6210\u4e00\u4e2a\u5408\u7406\u7684\u5c42\u6570\u3002\n    // \u8be5 randomLevel \u65b9\u6cd5\u4f1a\u968f\u673a\u751f\u6210 1~MAX_LEVEL \u4e4b\u95f4\u7684\u6570\uff0c\u4e14 \uff1a\n    //        50%\u7684\u6982\u7387\u8fd4\u56de 1\n    //        25%\u7684\u6982\u7387\u8fd4\u56de 2\n    //      12.5%\u7684\u6982\u7387\u8fd4\u56de 3 ...\n    private int randomLevel() {\n        int level = 1;\n\n        while (Math.random() < SKIPLIST_P && level < MAX_LEVEL)\n            level += 1;\n        return level;\n    }\n\n    public void printAll() {\n        Node p = head;\n        while (p.forwards[0] != null) {\n            System.out.print(p.forwards[0] + " ");\n            p = p.forwards[0];\n        }\n        System.out.println();\n    }\n\n    /**\n     * \u7ed3\u6784\u7684\u6838\u5fc3\u70b9\u5728 forwards \u5c5e\u6027\uff0c\u5373\u5411\u53f3\u662f\u94fe\u8868\uff0c\u5411\u4e0b\u662f\u6570\u7ec4\n     * forwards \u8bb0\u5f55\u7684\u5c31\u662f\u5411\u53f3\u7684\u8282\u70b9\uff0c\u540c\u65f6 forwards \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u8bb0\u5f55\u7684\u662f\u4ece0\u5c42\u5373\u6570\u636e\u5c42\u5230\u5f53\u524d\u7d22\u5f15\u9ad8\u5ea6\u7684 \u5411\u4e0b\u7684\u6570\u7ec4\n     * \u4e5f\u5c31\u662f\u8bf4 forwards \u6570\u7ec4\u7684\u7684\u957f\u5ea6\u6700\u957f\u4e0d\u4f1a\u8d85\u8fc7\u7d22\u5f15\u7684\u9ad8\u5ea6\uff1b\u540c\u65f6\u90fd\u662f\u75310\u5c42\u5230n\u5c42\u7684\uff0c\u5373forwards[0]\u5c31\u4e00\u5b9a\u662f\u6570\u636e\u8282\u70b9\u800c\u975e\u7d22\u5f15\u8282\u70b9\n     */\n    public static class Node {\n        private int data = -1;\n        /*\n         * forwards \u662f\u5411\u4e0b\u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684data\u90fd\u662f\u76f8\u540c\u7684\uff0c\u8fd9\u4e2a\u5728insert\u65f6\u5c06\u6bcf\u4e2a\n         * \u8fd9\u91cc\u7a7a\u95f4\u4e0a\u8fd8\u53ef\u4ee5\u4f18\u5316\uff0c\u56e0\u4e3a\u4e0d\u662f\u6bcf\u4e2a\u8282\u70b9\u7684\u5411\u4e0b\u6570\u7ec4\u90fd\u9700\u8981\u5168\u90e8\u7684\u957f\u5ea6\n         */\n        private final Node[] forwards = new Node[MAX_LEVEL];\n        private int maxLevel = 0;\n\n        @Override\n        public String toString() {\n\n            return "{ data: " +\n                    data +\n                    "; levels: " +\n                    maxLevel +\n                    " }";\n        }\n    }\n'})}),"\n",(0,a.jsx)(n.h3,{id:"\u5e76\u53d1\u5b89\u5168\u7684\u8df3\u8868",children:"\u5e76\u53d1\u5b89\u5168\u7684\u8df3\u8868"}),"\n",(0,a.jsxs)(n.p,{children:["\u5982\u679c\u662f\u8981\u4fdd\u8bc1\u5e76\u53d1\u5b89\u5168\uff0cJava \u4e2d ",(0,a.jsx)(n.code,{children:"ConcurrentSkipListMap"})," \u548c ",(0,a.jsx)(n.code,{children:"ConcurrentSkipListSet"})," \u63d0\u4f9b\u4e86\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e2d\u5b9e\u73b0\u4e86\u6709\u5e8f ",(0,a.jsx)(n.code,{children:"Map"})," \u548c ",(0,a.jsx)(n.code,{children:"Set"})," \u7684\u9ad8\u6548\u8bbf\u95ee\u548c\u4fee\u6539\u64cd\u4f5c\u3002\u5b83\u4eec\u662f\u65e0\u9501\u6216\u4f4e\u9501\u8bbe\u8ba1\u7684\u4f18\u79c0\u793a\u4f8b\uff0c\u9002\u5408\u5728\u9ad8\u5e76\u53d1\u73af\u5883\u4e0b\u4f7f\u7528\u3002\n",(0,a.jsx)(n.code,{children:"ConcurrentSkipListSet"})," \u5c31\u662f\u57fa\u4e8e ",(0,a.jsx)(n.code,{children:"ConcurrentSkipListMap"})," \u5b9e\u73b0\u7684\uff0c\u7c7b\u4f3c\u4e8e",(0,a.jsx)(n.code,{children:"HashSet"}),"\u548c",(0,a.jsx)(n.code,{children:"HashMap"}),"\uff1b ",(0,a.jsx)(n.code,{children:"ConcurrentSkipListSet"})," \u7684\u5b9e\u73b0\u89e3\u6790\uff0c\u5728",(0,a.jsx)(n.a,{href:"../JUC/JUC-%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8",children:"JUC-\u5e76\u53d1\u5bb9\u5668"}),"\u4e2d\u7684ConcurrentSkipListMap\u91cc\u3002"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>l});var a=r(6540);const t={},i=a.createContext(t);function d(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);